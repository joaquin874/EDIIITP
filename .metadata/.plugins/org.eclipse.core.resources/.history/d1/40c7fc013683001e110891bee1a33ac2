/*
 * TP FINAL EDII
 */

#include "LPC17xx.h"
#include "lpc17xx_gpdma.h"
#include "lpc17xx_adc.h"
#include "lpc17xx_dac.h"
#include "lpc17xx_uart.h"
#include "lpc17xx_pinsel.h"


#include <cr_section_macros.h>

#define SRAM0 0x2007C000
#define BaudRate 38400
#define SAMPLES 100
#define DMA_SIZE 60
#define NUM_SINE_SAMPLE 60
#define SINE_FREQ_IN_HZ 50
#define PCLK_DAC_IN_MHZ 25

uint32_t dac_sine_lut[60];

uint32_t dac_pwm[SAMPLES];
GPDMA_Channel_CFG_Type GPDMACfg1;
/**
 * Generates a PWM signal by writing to a memory address in SRAM0.
 * Based on the duty_cycle value, this function writes a 1 or a 0 to the memory address
 * 100 times, in order to generate a PWM signal that can variate from a 1% to 100% duty cycle.
 */
void pwm_generator(uint8_t duty_cycle){
    //uint32_t *mem_address = (uint32_t *) SRAM0;

    for(int duty_index = 0; duty_index < 100; duty_index++){
        if(duty_index < duty_cycle){
            dac_pwm[duty_index] = (1023 << 6);
        }
        else{
        	dac_pwm[duty_index] = 0;
        }
    }
}

/**
 * Configures external interrupt 0 (EINT0) on pin P2.10.
 * Sets the pin mode to pull-up resistor.
 * Sets the interrupt mode to edge-sensitive.
 * Sets the interrupt polarity to active high.
 * Enables the interrupt in the NVIC.
 */
void eint_config(){
    LPC_PINCON->PINSEL4 |= (1<<20); //P2.10 as EINT0
    LPC_PINCON->PINMODE4 |= (3<<20);

    LPC_SC->EXTMODE = 1;
    LPC_SC->EXTPOLAR = 1;
    LPC_SC->EXTINT = 1;

    NVIC_EnableIRQ(EINT0_IRQn);
    return;
}


/**
 * This function initializes the ADC module with a frequency of 200kHz, disables burst mode,
 * powers down the ADC, enables channel 0, starts conversion on 8 channels and configures the
 * start edge as falling edge.
 */
void adc_config(void){
	LPC_PINCON->PINSEL1 |= (1<<14);
	LPC_PINCON->PINMODE1 |= (2<<14);

	ADC_Init(LPC_ADC, 200000);
    ADC_BurstCmd(LPC_ADC, DISABLE);
    //ADC_PowerdownCmd(LPC_ADC, ENABLE);
    ADC_ChannelCmd(LPC_ADC, 0, ENABLE);
    ADC_StartCmd(LPC_ADC, 4);
    ADC_EdgeStartConfig(LPC_ADC, 0);
    ADC_IntConfig(LPC_ADC, 0, ENABLE);
    //ADC_BurstCmd(LPC_ADC, ENABLE);
    NVIC_EnableIRQ(ADC_IRQn);
    return;
}


 /* Configures the DAC (Digital-to-Analog Converter) to output analog signals through pin P0.26.
 * This function initializes the DAC, sets the clock for the DAC, and enables the DAC counter and DMA.
 */
void dac_config(void){
	uint32_t tmp;
	DAC_CONVERTER_CFG_Type DAC_ConverterConfigStruct;
	DAC_ConverterConfigStruct.CNT_ENA =SET;
	DAC_ConverterConfigStruct.DMA_ENA = SET;
	DAC_Init(LPC_DAC);
	/* set time out for DAC*/
	tmp = (PCLK_DAC_IN_MHZ*1000000)/(SINE_FREQ_IN_HZ*NUM_SINE_SAMPLE);
	DAC_SetDMATimeOut(LPC_DAC,tmp);
	DAC_ConfigDAConverterControl(LPC_DAC, &DAC_ConverterConfigStruct);
	return;
}

void confPin(void){
	PINSEL_CFG_Type PinCfg;
	/*
	 * Init DAC pin connect
	 * AOUT on P0.26
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Pinnum = 26;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	return;
}
/**
 * Configures Timer1 with a prescaler of 99 and a match value of 500000.
 * This means the timer will interrupt every 0.5 seconds.
 * Enables reset and interrupt on match value.
 * Clears interrupt flags and enables Timer1 interrupt.
 */
void timer_config(void){
    LPC_SC->PCLKSEL0 |= (1<<2); //PCLK = CCLK
    LPC_TIM0->PR = 99; //Prescaler = 99
    LPC_TIM0->MR1 = 50000;
    LPC_TIM0->MCR |= (1<<4); //Reset on MR1
    LPC_TIM0->EMR |= (3<<6); //Toggle on MR1
    LPC_TIM0->TCR |= 0x03; //Reseteo y habilito el timer0
    LPC_TIM0->TCR &=~ 0x02; //Deshabilito el reset del timer0
}


/**
 * Configures the DMA controller to transfer data from SRAM0 to the DACR register of the LPC_DAC peripheral.
 * Uses a linked list item (LLI) to define the transfer parameters.
 * Initializes and sets up the GPDMA channel 0 with the defined parameters.
 */
void dma_config(void){
    GPDMA_LLI_Type LLI;
    LLI.SrcAddr = (uint32_t) &(dac_sine_lut);
    LLI.DstAddr = (uint32_t) & (LPC_DAC->DACR);
    LLI.NextLLI = (uint32_t) &LLI;
    LLI.Control = 60      //transfer size 100 registers
				|(2<<18)    //source width 32 bits
				|(2<<21)    //dest width 32 bits
                |(1<<26);   //source increment
    GPDMA_Init();

    GPDMACfg1.ChannelNum = 0;
	GPDMACfg1.SrcMemAddr = (uint32_t) &(dac_sine_lut);
	GPDMACfg1.DstMemAddr = 0;
	GPDMACfg1.TransferSize = 60;
	GPDMACfg1.TransferWidth = 0;
	GPDMACfg1.TransferType = GPDMA_TRANSFERTYPE_M2P;
	GPDMACfg1.SrcConn = 0;
	GPDMACfg1.DstConn = GPDMA_CONN_DAC;
	GPDMACfg1.DMALLI = (uint32_t)&LLI;
	GPDMA_Setup(&GPDMACfg1);

    return;
}

/**
 * Configures UART2 to enable communication through TXD3 and RXD3 pins.
 */
void uart_config(){
    LPC_PINCON->PINSEL0 |= 0x02; //TXD3
    LPC_PINCON->PINSEL0 |= (0x02<<2); //RXD3
    UART_CFG_Type UARTConfigStruct;
    UART_FIFO_CFG_Type UARTFIFOConfigStruct;
    UART_ConfigStructInit(&UARTConfigStruct);

    UART_Init(LPC_UART3, &UARTConfigStruct);

    UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);
    UART_FIFOConfig(LPC_UART3, &UARTFIFOConfigStruct);
	UART_TxCmd(LPC_UART3, ENABLE);
	return;
}


/**
 * Interrupt handler for External Interrupt 0 (EINT0)
 * 
 * This function toggles the power state of the ADC module on every interrupt trigger.
 */
void EINT0_IRQHandler(void){
//	static uint16_t mode = 0;
//    if(mode % 2 == 0){
//        ADC_PowerdownCmd(LPC_ADC, DISABLE);
//    }
//    else{
//        ADC_PowerdownCmd(LPC_ADC, ENABLE);
//    }
//    mode++;
	for(int i = 0; i < 100000; i++){}
	uint8_t string[] = {0x35};
	UART_Send(LPC_UART3, string, sizeof(string), BLOCKING);

    LPC_SC->EXTINT = 1;
    return;
}

//
void ADC_IRQHandler(void){
	if(LPC_ADC->ADDR0 & (1<<31)){
		uint32_t water_level = (LPC_ADC->ADDR0>>6) & 0x3FF;
		//static int i = 0;
		//DAC_UpdateValue(LPC_DAC, water_level);
        //LPC_DAC->DACR |= (((LPC_ADC->ADDR0>>6) & 0x3FF) <<6);
		if(water_level < 300){
			//pwm_generator(50);
			uint8_t string[] = {0x35};
			UART_Send(LPC_UART3, string, sizeof(string), BLOCKING);
			//GPDMA_ChannelCmd(0, ENABLE);
			//i++;
		}

//		}
		//LPC_TIM0->EMR |= (1<<6);
	LPC_ADC->ADINTEN |= 1;

	}
	return;
}


int main(void) {
	uint32_t i;
		uint32_t sin_0_to_90_16_samples[16]={\
				0,1045,2079,3090,4067,\
				5000,5877,6691,7431,8090,\
				8660,9135,9510,9781,9945,10000\
		};

		//Prepare DAC sine look up table
		for(i=0;i<60;i++)
		{
			if(i<=15)
			{
				dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[i]/10000;
				if(i==15) dac_sine_lut[i]= 1023;
			}
			else if(i<=30)
			{
				dac_sine_lut[i] = 512 + 512*sin_0_to_90_16_samples[30-i]/10000;
			}
			else if(i<=45)
			{
				dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[i-30]/10000;
			}
			else
			{
				dac_sine_lut[i] = 512 - 512*sin_0_to_90_16_samples[60-i]/10000;
			}
			dac_sine_lut[i] = (dac_sine_lut[i]<<6);
		}
	confPin();
	//pwm_generator(50);
	dma_config();
	//uart_config();
	//adc_config();
	//timer_config();
	dac_config();
	//eint_config();
	GPDMA_ChannelCmd(0, ENABLE);
	//UART_Send(LPC_UART3, string, sizeof(string), BLOCKING);
	while (1){
			for(int i = 0; i < 100000000; i++){
				int i =0;
			}
		}
    return 0;
}
